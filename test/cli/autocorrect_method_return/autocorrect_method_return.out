autocorrect_method_return.rb:7: Expected `String` but found `NilClass` for method result type https://srb.help/7005
     7 |    puts nil
            ^^^^^^^^
  Expected `String` for result type of method `implicit_return_non_empty_cont_block`:
    autocorrect_method_return.rb:6:
     6 |  def implicit_return_non_empty_cont_block
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  Got `NilClass` originating from:
    autocorrect_method_return.rb:7:
     7 |    puts nil
            ^^^^^^^^

autocorrect_method_return.rb:12: Expected `String` but found `NilClass` for method result type https://srb.help/7005
    12 |  return puts nil
          ^^^^^^^^^^^^^^^
  Expected `String` for result type of method `double_return`:
    autocorrect_method_return.rb:11:
    11 |def double_return
        ^^^^^^^^^^^^^^^^^
  Got `NilClass` originating from:
    autocorrect_method_return.rb:12:
    12 |  return puts nil
                 ^^^^^^^^

autocorrect_method_return.rb:22: Expected `String` but found `T.nilable(String)` for method result type https://srb.help/7005
    22 |  return res
          ^^^^^^^^^^
  Expected `String` for result type of method `initialized_twice`:
    autocorrect_method_return.rb:16:
    16 |def initialized_twice(x)
        ^^^^^^^^^^^^^^^^^^^^^^^^
  Got `T.nilable(String)` originating from:
    autocorrect_method_return.rb:18:
    18 |    res = x.name
                  ^^^^^^
    autocorrect_method_return.rb:20:
    20 |    res = x.name
                  ^^^^^^
  Autocorrect: Done
    autocorrect_method_return.rb:22: Replaced with `T.must(res)`
    22 |  return res
                 ^^^

autocorrect_method_return.rb:32: Expected `String` but found `NilClass` for method result type https://srb.help/7005
    32 |end
        ^^^
  Expected `String` for result type of method `implicit_return_via_else`:
    autocorrect_method_return.rb:26:
    26 |def implicit_return_via_else
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  Got `NilClass` originating from:
    autocorrect_method_return.rb:26: Possibly uninitialized (`NilClass`) in:
    26 |def implicit_return_via_else
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Errors: 4

--------------------------------------------------------------------------

# typed: true

extend T::Sig

  sig {returns(String)}
  def implicit_return_non_empty_cont_block
    puts nil
  # ^^^^^^^^ error: Expected `String` but found `NilClass` for method result type
  end
sig {returns(String)}
def double_return
  return puts nil
end

sig {params(x: Module).returns(String)}
def initialized_twice(x)
  if T.unsafe(nil)
    res = x.name
  else
    res = x.name
  end
  return T.must(res)
end

sig {returns(String)}
def implicit_return_via_else
  if T.unsafe(nil)
    return 'yep'
  end
  # TODO(jez) This causes a syntax error that we should detect and skip
  # emitting an autocorrect for.
end

--------------------------------------------------------------------------

autocorrect_method_return.rb:7: Expected `String` but found `NilClass` for method result type https://srb.help/7005
     7 |    puts nil
            ^^^^^^^^
  Expected `String` for result type of method `implicit_return_non_empty_cont_block`:
    autocorrect_method_return.rb:6:
     6 |  def implicit_return_non_empty_cont_block
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  Got `NilClass` originating from:
    autocorrect_method_return.rb:7:
     7 |    puts nil
            ^^^^^^^^
  Autocorrect: Done
    autocorrect_method_return.rb:7: Replaced with `T.unsafe(puts nil)`
     7 |    puts nil
            ^^^^^^^^

autocorrect_method_return.rb:12: Expected `String` but found `NilClass` for method result type https://srb.help/7005
    12 |  return puts nil
          ^^^^^^^^^^^^^^^
  Expected `String` for result type of method `double_return`:
    autocorrect_method_return.rb:11:
    11 |def double_return
        ^^^^^^^^^^^^^^^^^
  Got `NilClass` originating from:
    autocorrect_method_return.rb:12:
    12 |  return puts nil
                 ^^^^^^^^
  Autocorrect: Done
    autocorrect_method_return.rb:12: Replaced with `T.unsafe(puts nil)`
    12 |  return puts nil
                 ^^^^^^^^

autocorrect_method_return.rb:22: Expected `String` but found `T.nilable(String)` for method result type https://srb.help/7005
    22 |  return res
          ^^^^^^^^^^
  Expected `String` for result type of method `initialized_twice`:
    autocorrect_method_return.rb:16:
    16 |def initialized_twice(x)
        ^^^^^^^^^^^^^^^^^^^^^^^^
  Got `T.nilable(String)` originating from:
    autocorrect_method_return.rb:18:
    18 |    res = x.name
                  ^^^^^^
    autocorrect_method_return.rb:20:
    20 |    res = x.name
                  ^^^^^^
  Autocorrect: Done
    autocorrect_method_return.rb:22: Replaced with `T.unsafe(res)`
    22 |  return res
                 ^^^

autocorrect_method_return.rb:32: Expected `String` but found `NilClass` for method result type https://srb.help/7005
    32 |end
        ^^^
  Expected `String` for result type of method `implicit_return_via_else`:
    autocorrect_method_return.rb:26:
    26 |def implicit_return_via_else
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  Got `NilClass` originating from:
    autocorrect_method_return.rb:26: Possibly uninitialized (`NilClass`) in:
    26 |def implicit_return_via_else
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  Autocorrect: Done
    autocorrect_method_return.rb:32: Replaced with `T.unsafe(end)`
    32 |end
        ^^^
Errors: 4

--------------------------------------------------------------------------

# typed: true

extend T::Sig

  sig {returns(String)}
  def implicit_return_non_empty_cont_block
    T.unsafe(puts nil)
  # ^^^^^^^^ error: Expected `String` but found `NilClass` for method result type
  end
sig {returns(String)}
def double_return
  return T.unsafe(puts nil)
end

sig {params(x: Module).returns(String)}
def initialized_twice(x)
  if T.unsafe(nil)
    res = x.name
  else
    res = x.name
  end
  return T.unsafe(res)
end

sig {returns(String)}
def implicit_return_via_else
  if T.unsafe(nil)
    return 'yep'
  end
  # TODO(jez) This causes a syntax error that we should detect and skip
  # emitting an autocorrect for.
T.unsafe(end)
